[{"question_text": "Have the function PalindromeTwo( str ) take the str parameter being passed and return the string true if the parameter is a palindrome, (the string is the same forward as it is backward) otherwise return the string false . The parameter entered may have punctuation and symbols but they should not affect whether the string is in fact a palindrome. For example: \"Anne, I vote more cars race Rome-to-Vienna\" should return true . Use the Parameter Testing feature in the box below to test your code with different arguments.", "title": "Palindrome Two", "solution_text": ["import re\r\n\r\ndef PalindromeTwo(s): \r\n    cleaned_s = ''.join(re.findall(r\"[\\w']+\", s)).lower()\r\n    return str(cleaned_s == cleaned_s[::-1]).lower()\r\n    \r\n# keep this function call here  \r\nprint PalindromeTwo(raw_input())"]}, {"question_text": "Have the function RunLength( str ) take the str parameter being passed and return a compressed version of the string using the Run-length encoding algorithm. This algorithm works by taking the occurrence of each repeating character and outputting that number along with a single character of the repeating sequence. For example: \"wwwggopp\" would return 3w2g1o2p . The string will not contain any numbers, punctuation, or symbols. Use the Parameter Testing feature in the box below to test your code with different arguments.", "title": "Run Length", "solution_text": ["def RunLength(s): \r\n    encoded_string = \"\"\r\n    index = 0\r\n    while index < len(s):\r\n        count = 0\r\n        end = index\r\n        while end < len(s):\r\n            if s[index] == s[end]:\r\n                count += 1\r\n                end += 1\r\n            else:\r\n                break\r\n        encoded_string += \"{}{}\".format(str(count), s[index])\r\n        index = end\r\n        \r\n    # code goes here \r\n    return encoded_string\r\n    \r\n# keep this function call here  \r\nprint RunLength(raw_input())"]}, {"question_text": "Have the function StringScramble( str1 , str2 ) take both \r\n\r\nparameters being passed and return the string true if a portion of str1 characters can be rearranged to match str2 , otherwise return the string false . For example: if str1 is \"rkqodlw\" and str2 is \"world\" the output should return true . Punctuation and symbols will not be entered with the parameters. Use the Parameter Testing feature in the box below to test your code with different arguments.", "title": "String Scramble", "solution_text": ["def StringScramble(str1,str2): \r\n    for i in str2:\r\n        if not i in str1:\r\n            return \"false\"\r\n        str1 = str1.replace(i, \"\", 1)\r\n    return \"true\"\r\n    \r\n# keep this function call here  \r\nprint StringScramble(raw_input())"]}, {"question_text": "Have the function ArithGeoII( arr ) take the array of numbers stored in arr and return the string \"Arithmetic\" if the sequence follows an arithmetic pattern or return \"Geometric\" if it follows a geometric pattern. If the sequence doesn't follow either pattern return -1 . An arithmetic sequence is one where the difference between each of the numbers is consistent, where as in a geometric sequence, each term after the first is multiplied by some constant or common ratio. Arithmetic example: [2, 4, 6, 8] and Geometric example: [2, 6, 18, 54]. Negative numbers may be entered as parameters, 0 will not be entered, and no array will contain all the same elements. Use the Parameter Testing feature in the box below to test your code with different arguments.", "title": "Arith Geo II", "solution_text": ["def ArithGeoII(arr): \r\n    index = 3\r\n    if arr[1] - arr[0] == arr[2] - arr[1]:\r\n        # test for arithmetic\r\n        diff = arr[1] - arr[0]\r\n        while index < len(arr):\r\n            if arr[index] - arr[index-1] != diff:\r\n                return -1\r\n            index += 1\r\n        return \"Arithmetic\"\r\n    \r\n    if arr[1] / arr[0] == arr[2] / arr[1]:\r\n        # test for geometric\r\n        ratio = arr[1] / arr[0]\r\n        while index < len(arr):\r\n            if arr[index] / arr[index-1] != ratio:\r\n                return -1\r\n            index += 1\r\n        return \"Geometric\"\r\n        \r\n    return -1\r\n    \r\n# keep this function call here  \r\nprint ArithGeoII(raw_input())"]}]