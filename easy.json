[{"question_text": "Have the function LongestWord( sen ) take the sen parameter being passed and return the largest word in the string. If there are two or more words that are the same length, return the first word from the string with that length. Ignore punctuation and assume sen will not be empty. Use the Parameter Testing feature in the box below to test your code with different arguments.", "title": "Longest Word", "solution_text": ["def LongestWord(sen): \r\n    sen_copy = \"\"\r\n    # copy over all non-symbols\r\n    for character in sen:\r\n        if character.isalnum() or character == ' ':\r\n            sen_copy += character\r\n            \r\n    words = sen_copy.split()\r\n    return max(words, key=len)\r\n    \r\n# keep this function call here  \r\nprint LongestWord(raw_input())"]}, {"question_text": "Have the function FirstFactorial( num ) take the num parameter being passed and return the factorial of it \r\n( e.g. if num = 4, return (4 * 3 * 2 * 1) ). For the test cases, the range will be between 1 and 18 and the input will always be an integer. Use the Parameter Testing feature in the box below to test your code with different arguments.", "title": "First Factorial", "solution_text": ["def FirstFactorial(num): \r\n    factorial = 1\r\n    for x in range(num, 0, -1):\r\n        factorial *= x\r\n    return factorial\r\n    \r\n# keep this function call here  \r\nprint FirstFactorial(raw_input())"]}, {"question_text": "Have the function FirstReverse( str ) take the str parameter being passed and return the string in reversed order. For example: if the input string is \"Hello World and Coders\" then your program should return the string sredoC dna dlroW olleH . Use the Parameter Testing feature in the box below to test your code with different arguments.", "title": "First Reverse", "solution_text": ["def FirstReverse(str): \r\n\r\n    # code goes here \r\n    return str[::-1]\r\n    \r\n# keep this function call here  \r\nprint FirstReverse(raw_input())"]}, {"question_text": "Have the function LetterChanges( str ) take the str parameter being passed and modify it using the following algorithm. Replace every letter in the string with the letter following it in the alphabet ( ie. c becomes d, z becomes a). Then capitalize every vowel in this new string (a, e, i, o, u) and finally return this modified string. Use the Parameter Testing feature in the box below to test your code with different arguments.", "title": "Letter Changes", "solution_text": ["import string\r\n\r\ndef LetterChanges(str): \r\n\r\n    # code goes here \r\n    \r\n    str_copy = \"\"\r\n    i = 0\r\n    while i < len(str):\r\n        if str[i].isalpha():\r\n            if str[i].lower() == 'z':\r\n                str_copy += ('A')\r\n            \r\n            else:\r\n                position = string.lowercase.index(str[i].lower())\r\n                nextLetter = string.lowercase[position+1]\r\n                if nextLetter in \"aeiou\":\r\n                    nextLetter = nextLetter.upper()\r\n                \r\n                str_copy += (nextLetter)\r\n        \r\n        else:\r\n            str_copy += str[i]\r\n        \r\n        i += 1\r\n    \r\n    return str_copy\r\n    \r\n# keep this function call here  \r\nprint LetterChanges(raw_input())"]}, {"question_text": "Have the function SimpleAdding( num ) add up all the numbers from 1 to num . For example: if the input is 4 then your program should return 10 because 1 + 2 + 3 + 4 = 10. For the test cases, the parameter num will be any number from 1 to 1000. Use the Parameter Testing feature in the box below to test your code with different arguments.", "title": "Simple Adding", "solution_text": ["def SimpleAdding(num): \r\n\r\n    # code goes here\r\n    if num == 1:\r\n        return 1\r\n    \r\n    return num + SimpleAdding(num-1)\r\n    \r\n# keep this function call here  \r\nprint SimpleAdding(raw_input())"]}, {"question_text": "Have the function LetterCapitalize( str ) take the str parameter being passed and capitalize the first letter of each word. Words will be separated by only one space. Use the Parameter Testing feature in the box below to test your code with different arguments.", "title": "Letter Capitalize", "solution_text": ["def LetterCapitalize(str): \r\n\r\n    # code goes here \r\n    words = str.split()\r\n    capitalized = ' '.join([word[0].upper() + word[1:] for word in words])\r\n    return capitalized\r\n    \r\n# keep this function call here  \r\nprint LetterCapitalize(raw_input())"]}, {"question_text": "Have the function SimpleSymbols( str ) take the str parameter being passed and determine if it is an acceptable sequence by either returning the string true or false . The str parameter will be composed of + and = symbols with several letters between them ( ie. ++d+===+c++==a) and for the string to be true each letter must be surrounded by a + symbol. So the string to the left would be false. The string will not be empty and will have at least one letter. Use the Parameter Testing feature in the box below to test your code with different arguments.", "title": "Simple Symbols", "solution_text": ["def SimpleSymbols(str): \r\n\r\n    # code goes here \r\n    if str[0].isalpha() or str[-1].isalpha():\r\n        return \"false\"\r\n\r\n    index = 1\r\n    while index < len(str)-1:\r\n        if str[index].isalpha():\r\n            if not (str[index-1] == '+' and str[index+1] == '+'):\r\n                return \"false\"\r\n        index += 1\r\n    \r\n    return \"true\"\r\n    \r\n# keep this function call here  \r\nprint SimpleSymbols(raw_input())"]}, {"question_text": "Have the function CheckNums( num1 , num2 ) take both parameters being passed and return the string true if num2 is greater than num1 , otherwise return the string false . If the parameter values are equal to each other then return the string -1 . Use the Parameter Testing feature in the box below to test your code with different arguments.", "title": "Check Nums", "solution_text": ["def CheckNums(num1,num2): \r\n\r\n    # code goes here \r\n    if num1 == num2:\r\n        return \"-1\"\r\n    elif num2 > num1:\r\n        return \"true\"\r\n    return \"false\"\r\n    \r\n# keep this function call here  \r\nprint CheckNums(raw_input())"]}, {"question_text": "Have the function TimeConvert( num ) take the num parameter being passed and return the number of hours and minutes the parameter converts to ( ie. if num = 63 then the output should be 1:3). Separate the number of hours and minutes with a colon. Use the Parameter Testing feature in the box below to test your code with different arguments.", "title": "Time Convert", "solution_text": ["def TimeConvert(num): \r\n\r\n    # code goes here\r\n    hours = num / 60\r\n    minutes = num % 60\r\n    return \"{}:{}\".format(hours, minutes)\r\n    \r\n# keep this function call here  \r\nprint TimeConvert(raw_input())"]}, {"question_text": "Have the function AlphabetSoup( str ) take the str string parameter being passed and return the string with the letters in alphabetical order ( ie. hello becomes ehllo). Assume numbers and punctuation symbols will not be included in the string. Use the Parameter Testing feature in the box below to test your code with different arguments.", "title": "Alphabet Soup", "solution_text": ["def AlphabetSoup(sen): \r\n\r\n    # code goes here \r\n    return ''.join(sorted(sen))\r\n    \r\n# keep this function call here  \r\nprint AlphabetSoup(raw_input())"]}, {"question_text": "Have the function ABCheck( str ) take the str parameter being passed and return the string true if the characters a and b are separated by exactly 3 places anywhere in the string at least once ( ie. \"lane borrowed\" would result in true because there is exactly three characters between a and b ). Otherwise return the string false. Use the Parameter Testing feature in the box below to test your code with different arguments.", "title": "AB Check", "solution_text": ["def ABCheck(s): \r\n\r\n    # code goes here \r\n    index = 0\r\n    while index < len(s):\r\n        if s[index] == 'a':\r\n            if index >= 4 and s[index-4] == 'b':\r\n                return \"true\"\r\n            if index <= len(s) - 5 and s[index+4] == 'b':\r\n                return \"true\"\r\n        \r\n        index += 1\r\n    return \"false\"\r\n    \r\n# keep this function call here  \r\nprint ABCheck(raw_input())"]}, {"question_text": "Have the function VowelCount( str ) take the str string parameter being passed and return the number of vowels the string contains ( ie. \"All cows eat grass and moo\" would return 8). Do not count y as a vowel for this challenge. Use the Parameter Testing feature in the box below to test your code with different arguments.", "title": "Vowel Count", "solution_text": ["def VowelCount(s): \r\n\r\n    # code goes here\r\n    vowels = 'aeiou'\r\n    count = 0\r\n    for letter in s:\r\n        if letter.lower() in vowels:\r\n            count += 1\r\n    return count\r\n    \r\n# keep this function call here  \r\nprint VowelCount(raw_input())"]}, {"question_text": "Have the function WordCount( str ) take the str string parameter being passed and return the number of words the string contains ( e.g. \"Never eat shredded wheat or cake\" would return 6). Words will be separated by single spaces. Use the Parameter Testing feature in the box below to test your code with different arguments.", "title": "Word Count", "solution_text": ["def WordCount(sentence): \r\n\r\n    # code goes here \r\n    return len(sentence.split())\r\n    \r\n# keep this function call here  \r\nprint WordCount(raw_input())"]}, {"question_text": "Have the function ExOh( str ) take the str parameter  being passed and return the string true if there is an equal number of x 's and o 's, otherwise return the string false . Only these two letters will be entered in the string, no punctuation or numbers. For example: if str is \"xooxxxxooxo\" then the output should return false because there are 6 x's and 5 o's. Use the Parameter Testing feature in the box below to test your code with different arguments.", "title": "Ex Oh", "solution_text": ["def ExOh(s): \r\n\r\n    # code goes here \r\n    return str(s.count('x') == s.count('o')).lower()\r\n    \r\n# keep this function call here  \r\nprint ExOh(raw_input())"]}, {"question_text": "Have the function Palindrome( str ) take the str parameter being passed and return the string true if the parameter is a palindrome, (the string is the same forward as it is backward) otherwise return the string false . For example: \"racecar\" is also \"racecar\" backwards. Punctuation and numbers will not be part of the string. Use the Parameter Testing feature in the box below to test your code with different arguments.", "title": "Palindrome", "solution_text": ["def Palindrome(s): \r\n    s = ''.join(s.split()) # remove spaces first\r\n    return str(s == s[::-1]).lower()\r\n    \r\n# keep this function call here  \r\nprint Palindrome(raw_input())"]}, {"question_text": "Have the function ArithGeo( arr ) take the array of numbers stored in arr and return the string \"Arithmetic\" if the sequence follows an arithmetic pattern or return \"Geometric\" if it follows a geometric pattern. If the sequence doesn't follow either pattern return -1 . An arithmetic sequence is one where the difference between each of the numbers is consistent, where as in a geometric sequence, each term after the first is multiplied by some constant or common ratio. Arithmetic example: [2, 4, 6, 8] and Geometric example: [2, 6, 18, 54]. Negative numbers may be entered as parameters, 0 will not be entered, and no array will contain all the same elements. Use the Parameter Testing feature in the box below to test your code with different arguments.", "title": "Arith Geo", "solution_text": ["def ArithGeo(arr): \r\n    \r\n    # code goes here\r\n    index = 3\r\n    if arr[1] - arr[0] == arr[2] - arr[1]:\r\n        # test for arithmetic\r\n        diff = arr[1] - arr[0]\r\n        while index < len(arr):\r\n            if arr[index] - arr[index-1] != diff:\r\n                return -1\r\n            index += 1\r\n        return \"Arithmetic\"\r\n    \r\n    if arr[1] / arr[0] == arr[2] / arr[1]:\r\n        # test for geometric\r\n        ratio = arr[1] / arr[0]\r\n        while index < len(arr):\r\n            if arr[index] / arr[index-1] != ratio:\r\n                return -1\r\n            index += 1\r\n        return \"Geometric\"\r\n        \r\n    return -1\r\n    \r\n# keep this function call here  \r\nprint ArithGeo(raw_input())"]}, {"question_text": "Have the function LetterCountI( str ) take the str parameter being passed and return the first word with the greatest number of repeated letters. For example: \"Today, is the greatest day ever!\" should return greatest because it has 2 e's (and 2 t's) and it comes before ever which also has 2 e's. If there are no words with repeating letters return -1 . Words will be separated by spaces. Use the Parameter Testing feature in the box below to test your code with different arguments.", "title": "Letter Count I", "solution_text": ["from operator import itemgetter\r\n\r\ndef GetNumberOfRepeatedLetters(word):\r\n    initial_length = len(word)\r\n    # converting to a set removes duplicate values\r\n    word_as_set = set(word)\r\n    return initial_length - len(word_as_set)\r\n    \r\n\r\ndef LetterCountI(s): \r\n    words = s.split()\r\n    most_repeats = max([(GetNumberOfRepeatedLetters(word), word) for word in words], key=itemgetter(0))\r\n    \r\n    if most_repeats[0] == 0:\r\n        return -1\r\n        \r\n    # code goes here \r\n    return most_repeats[1]\r\n    \r\n# keep this function call here  \r\nprint LetterCountI(raw_input())"]}, {"question_text": "Have the function NumberSearch( str ) take the str parameter, search for all the numbers in the string, add them together, then return that final number. For example: if str is \"88Hello 3World!\" the output should be 91 . You will have to differentiate between single digit numbers and multiple digit numbers like in the example above. So \"55Hello\" and \"5Hello 5\" should return two different answers. Each string will contain at least one letter or symbol. Use the Parameter Testing feature in the box below to test your code with different arguments.", "title": "Number Addition", "solution_text": ["def NumberAddition(s):\r\n    index = 0\r\n    total = 0\r\n    while index < len(s):\r\n        number_index = index\r\n        if s[index].isdigit():\r\n            while number_index < len(s):\r\n                if s[number_index].isdigit():\r\n                    number_index += 1\r\n                else:\r\n                    break\r\n            total += int(s[index:number_index])\r\n            index = number_index + 1\r\n        else:\r\n            index += 1\r\n    \r\n    return total\r\n    \r\n# keep this function call here  \r\nprint NumberAddition(raw_input())"]}, {"question_text": "Have the function ArrayAdditionI( arr ) take the array of numbers stored in arr and return the string true if any combination of numbers in the array can be added up to equal the largest number in the array, otherwise return the string false . For example: if arr contains [4, 6, 23, 10, 1, 3] the output should return true because 4 + 6 + 10 + 3 = 23. The array will not be empty, will not contain all the same elements, and may contain negative numbers. Use the Parameter Testing feature in the box below to test your code with different arguments.", "title": "Array Addition I", "solution_text": ["def RecursiveSubsetSum(sum_target, arr):\r\n    # if we are down the last element\r\n    # return true if the remaining sum\r\n    # equals the remaining element\r\n    if len(arr) == 1:\r\n        return True if sum_target == arr[0] else False\r\n    \r\n    result = False\r\n    for i,n in enumerate(arr):\r\n        if result:\r\n            return True\r\n        # Recursively try both the case where the current index was used in the sum\r\n        # and the case where it wasn't\r\n        result = RecursiveSubsetSum(sum_target - n, arr[0:i]+arr[i+1:]) or RecursiveSubsetSum(sum_target, arr[0:i]+arr[i+1:])\r\n    return result\r\n\r\ndef ArrayAdditionI(arr):\r\n    largest = max(arr)\r\n    arr.remove(largest)\r\n    return str(RecursiveSubsetSum(largest, arr)).lower()\r\n    \r\n# keep this function call here  \r\nprint ArrayAdditionI(raw_input())"]}, {"question_text": "Have the function SecondGreatLow( arr ) take the array of numbers stored in arr and return the second lowest and second greatest numbers, respectively, separated by a space. For example: if arr contains [7, 7, 12, 98, 106] the output should be 12 98 . The array will not be empty and will contain at least 2 numbers. It can get tricky if there's just two numbers! Use the Parameter Testing feature in the box below to test your code with different arguments.", "title": "Second GreatLow", "solution_text": ["def SecondGreatLow(arr):\r\n    sorted_arr = sorted(arr)\r\n    output_string = \"\"\r\n    for x in sorted_arr:\r\n        if x != sorted_arr[0]:\r\n            output_string += str(x) + \" \"\r\n            break\r\n    for x in sorted_arr[::-1]:\r\n        if x != sorted_arr[-1]:\r\n            output_string += str(x)\r\n            break\r\n    return output_string\r\n    \r\n# keep this function call here  \r\nprint SecondGreatLow(raw_input())"]}, {"question_text": "Have the function SwapCase( str ) take the str parameter and swap the case of each character. For example: if str is \"Hello World\" the output should be hELLO wORLD . Let numbers and symbols stay the way they are. Use the Parameter Testing feature in the box below to test your code with different arguments.", "title": "Swap Case", "solution_text": ["def SwapCase(s): \r\n    return s.swapcase()\r\n    \r\n# keep this function call here  \r\nprint SwapCase(raw_input())"]}, {"question_text": "Have the function DivisionStringified( num1 , num2 ) take both parameters being passed, divide num1 by num2 , and return the result as a string with properly formatted commas. If an answer is only 3 digits long, return the number with no commas ( ie. 2 / 3 should output \"1\"). For example: if num1 is 123456789 and num2 is 10000 the output should be \"12,346\" . Use the Parameter Testing feature in the box below to test your code with different arguments.", "title": "Division Stringified", "solution_text": ["def DivisionStringified(num1,num2): \r\n    result = float(num1) / float(num2)\r\n    return \"{:,}\".format(int(round(result)))\r\n    \r\n# keep this function call here  \r\nprint DivisionStringified(raw_input())"]}, {"question_text": "Have the function CountingMinutesI( str ) take the str parameter being passed which will be two times (each properly formatted with a colon and am or pm) separated by a hyphen and return the total number of minutes between the two times. The time will be in a 12 hour clock format. For example: if str is 9:00am-10:00am then the output should be 60 . If str is 1:00pm-11:00am the output should be 1320 . Use the Parameter Testing feature in the box below to test your code with different arguments.", "title": "Counting Minutes I", "solution_text": ["def ReformatTime(time):\r\n    # reformats the time strings into pure minutes on a 24H clock\r\n    split_time = time.split(':')\r\n    hours = int(split_time[0])\r\n    if time[-2] == 'a' and hours == 12:\r\n        hours = 0\r\n    if time[-2] == 'p' and hours != 12:\r\n        hours += 12\r\n    minutes = int(split_time[1][:2])\r\n    return (60 * hours) + minutes\r\n    \r\n\r\ndef CountingMinutesI(s): \r\n    minutes = [ReformatTime(time) for time in s.split('-')]\r\n    #print(minutes)\r\n    if minutes[0] > minutes[1]:\r\n        return 1440 - (minutes[0] - minutes[1])\r\n    \r\n    return minutes[1] - minutes[0]\r\n    \r\n# keep this function call here  \r\nprint CountingMinutesI(raw_input())"]}, {"question_text": "Have the function MeanMode( arr ) take the array of numbers stored in arr and return 1 if the mode equals the mean , 0 if they don't equal each other ( ie. [5, 3, 3, 3, 1] should return 1 because the mode (3) equals the mean (3)). The array will not be empty, will only contain positive integers, and will not contain more than one mode. Use the Parameter Testing feature in the box below to test your code with different arguments.", "title": "Mean Mode", "solution_text": ["from collections import Counter\r\n\r\ndef Mean(arr):\r\n    return sum(arr) / len(arr)\r\n    \r\ndef Mode(arr):\r\n    occurrences = Counter(arr)\r\n    return occurrences.most_common(1)[0][0]\r\n\r\ndef MeanMode(arr): \r\n    if Mean(arr) == Mode(arr):\r\n        return 1\r\n    return 0\r\n    \r\n# keep this function call here  \r\nprint MeanMode(raw_input())"]}, {"question_text": "Have the function DashInsert( str ) insert dashes ('-') between each two odd numbers in str . For example: if str is 454793 the output should be 4547-9-3 . Don't count zero as an odd number. Use the Parameter Testing feature in the box below to test your code with different arguments.", "title": "Dash Insert", "solution_text": ["def isOdd(x):\r\n    return x % 2 == 1\r\n\r\ndef DashInsert(s): \r\n    index = 0\r\n    output_string = \"\"\r\n    while index < len(s)-1:\r\n        output_string += s[index]\r\n        if isOdd(int(s[index])) and isOdd(int(s[index+1])):\r\n            output_string += '-'\r\n        \r\n        index += 1\r\n    \r\n    return output_string + s[-1]\r\n    \r\n# keep this function call here  \r\nprint DashInsert(raw_input())"]}, {"question_text": "Have the function ThirdGreatest( strArr ) take the array of strings stored in strArr and return the third largest word within in. So for example: if strArr is [\"hello\", \"world\", \"before\", \"all\"] your output should be world because \"before\" is 6 letters long, and \"hello\" and \"world\" are both 5, but the output should be world because it appeared as the last 5 letter word in the array. If strArr was [\"hello\", \"world\", \"after\", \"all\"] the output should be after because the first three words are all 5 letters long, so return the last one. The array will have at least three strings and each string will only contain letters. Use the Parameter Testing feature in the box below to test your code with different arguments.", "title": "Third Greatest", "solution_text": ["def ThirdGreatest(strArr): \r\n    lengths = [(s, len(s)) for s in strArr]\r\n    sorted_lengths = sorted(lengths, key=lambda x: x[1], reverse=True)\r\n    return sorted_lengths[2][0]\r\n    \r\n# keep this function call here  \r\nprint ThirdGreatest(raw_input())"]}]